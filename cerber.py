import os
import json
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events, Button
from telethon.tl.types import User

load_dotenv()

# üîê Telegram credentials
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
cerber_group = os.getenv("CERBER_GROUP", "@cerber_gate")
approved_file = "approved_users.json"
session_name = "cerber"  # creates cerber.session separately

# üóÇ Init client
client = TelegramClient(session_name, api_id, api_hash)

# ‚úÖ –†–∞–±–æ—Ç–∞ —Å approved_users.json
def load_approved_users():
    if not os.path.exists(approved_file):
        return set()
    with open(approved_file, "r", encoding="utf-8") as f:
        try:
            return set(json.load(f))
        except json.JSONDecodeError:
            return set()

def save_approved_users(user_ids):
    with open(approved_file, "w", encoding="utf-8") as f:
        json.dump(sorted(list(user_ids)), f, indent=2)

# üëÅ –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@client.on(events.ChatAction(chats=cerber_group))
async def handle_new_member(event):
    if event.user_joined or event.user_added:
        user = await event.get_user()
        approved = load_approved_users()

        if user.bot or not isinstance(user, User):
            return

        if user.id in approved:
            print(f"[CERBER] {user.id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º.")
            return

        try:
            await client.send_message(
                user.id,
                (
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!\n\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É, "
                    "–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –∑–∞–¥–µ–≤–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ, –º–æ—Ä–∞–ª—å–Ω—ã–µ –∏–ª–∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ —É–±–µ–∂–¥–µ–Ω–∏—è.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è."
                ),
                buttons=[Button.inline("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", b"cerber_ok")]
            )
            print(f"[CERBER] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.id}")

            # ‚è≥ –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç
            asyncio.create

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@client.on(events.CallbackQuery(data=b"cerber_ok"))
async def approve_user(event):
    user_id = event.sender_id
    approved = load_approved_users()

    if user_id not in approved:
        approved.add(user_id)
        save_approved_users(approved)
        print(f"[CERBER ‚úÖ] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {user_id}")

    await event.respond("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.")
    await client.send_message(user_id, "üëâ –í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await client.start()
    print("[CERBER] –°—Ç–∞—Ä—Ç–æ–≤–∞–ª. –û—Ö—Ä–∞–Ω—è—é –≥—Ä—É–ø–ø—É...")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
